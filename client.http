### Teste da API Question API

# ===== CONFIGURA√á√ÉO DE VARI√ÅVEIS =====
@baseUrl = https://e4eea2dd6b5d.ngrok-free.app
@contentType = application/json

# ===== VARI√ÅVEIS PARA TESTES =====
@userEmail = joao@email.com
@userPassword = senha123
@userName = Jo√£o Silva

# ===== VARI√ÅVEIS DIN√ÇMICAS (ser√£o preenchidas automaticamente) =====
@authToken = 
@userId = 
@subscriptionId = 

# ===== TESTES DE AUTENTICA√á√ÉO =====

# POST - Criar novo usu√°rio
POST {{baseUrl}}/user
Content-Type: {{contentType}}

{
  "name": "{{userName}}",
  "email": "{{userEmail}}",
  "password": "{{userPassword}}"
}

###

# POST - Login (captura o token automaticamente)
# @name login
POST {{baseUrl}}/auth/login
Content-Type: {{contentType}}

{
  "email": "{{userEmail}}",
  "password": "{{userPassword}}"
}

###

# ===== SCRIPT PARA CAPTURAR TOKEN E USER ID =====
# Ap√≥s o login, execute este script para configurar as vari√°veis
> {%
    if (response.status === 200) {
        const body = response.body;
        console.log("=== LOGIN RESPONSE ===");
        console.log("Status:", response.status);
        console.log("Body completo:", body);
        console.log("Access token:", body.access_token);
        console.log("User:", body.user);
        
        if (body.access_token) {
            client.global.set("authToken", body.access_token);
            console.log("‚úÖ Token capturado:", body.access_token);
        } else {
            console.log("‚ùå Token n√£o encontrado no response");
        }
        
        if (body.user && body.user.id) {
            client.global.set("userId", body.user.id);
            console.log("‚úÖ User ID capturado:", body.user.id);
        } else {
            console.log("‚ùå User ID n√£o encontrado no response");
        }
    } else {
        console.log("‚ùå Login falhou - Status:", response.status);
        console.log("‚ùå Response:", response.body);
    }
%}

###

# GET - Listar todos os usu√°rios
GET {{baseUrl}}/user
Authorization: Bearer {{authToken}}

###

# GET - Listar usu√°rio por ID (usa o ID capturado do login)
GET {{baseUrl}}/user/{{userId}}
Authorization: Bearer {{authToken}}

###

# POST - Criar outro usu√°rio para teste
POST {{baseUrl}}/user
Content-Type: {{contentType}}

{
  "name": "Maria Santos",
  "email": "maria@email.com",
  "password": "senha456"
}

###

# ===== NOVOS ENDPOINTS DE USU√ÅRIO =====

# GET - Perfil do usu√°rio autenticado
GET {{baseUrl}}/user/profile
Authorization: Bearer {{authToken}}

###

# PUT - Atualizar perfil do usu√°rio
PUT {{baseUrl}}/user/profile
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "name": "Jo√£o Silva Atualizado"
}

###

# PUT - Alterar senha do usu√°rio
PUT {{baseUrl}}/user/change-password
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "currentPassword": "{{userPassword}}",
  "newPassword": "novaSenha123"
}

###

# ===== ENDPOINTS DE RECUPERA√á√ÉO DE SENHA =====

# POST - Solicitar recupera√ß√£o de senha
POST {{baseUrl}}/auth/forgot-password
Content-Type: {{contentType}}

{
  "email": "{{userEmail}}"
}

> {%
    console.log("=== FORGOT PASSWORD ===");
    console.log("Status:", response.status);
    console.log("Response:", response.body);
    
    if (response.status === 200) {
        console.log("‚úÖ Solicita√ß√£o de recupera√ß√£o enviada");
        console.log("üìß Verifique o console do servidor para o token de reset");
    }
%}

###

# POST - Redefinir senha com token
# ATEN√á√ÉO: Substitua "SEU_TOKEN_AQUI" pelo token que aparece no console do servidor
POST {{baseUrl}}/auth/reset-password
Content-Type: {{contentType}}

{
  "token": "SEU_TOKEN_AQUI",
  "newPassword": "senhaNova456"
}

> {%
    console.log("=== RESET PASSWORD ===");
    console.log("Status:", response.status);
    console.log("Response:", response.body);
    
    if (response.status === 200) {
        console.log("‚úÖ Senha redefinida com sucesso!");
        console.log("üîë Agora voc√™ pode fazer login com a nova senha");
    }
%}

###

# ===== TESTES DO STRIPE =====

# POST - Criar assinatura (normal - requer m√©todo de pagamento do cliente)
POST {{baseUrl}}/payment/subscription
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "priceId": "price_1RziPGIrPk9SZpjAkUAai3gB"
}

###

# POST - Criar assinatura com m√©todo de pagamento de teste (para desenvolvimento)
# @name createTestSubscription
POST {{baseUrl}}/payment/subscription/test
Authorization: Bearer {{authToken}}
Content-Type: {{contentType}}

{
  "priceId": "price_1RziPGIrPk9SZpjAkUAai3gB"
}

###

# SCRIPT PARA DEBUG DO TOKEN E CAPTURAR SUBSCRIPTION ID =====
> {%
    console.log("=== SUBSCRIPTION REQUEST DEBUG ===");
    const authToken = client.global.get("authToken");
    const userId = client.global.get("userId");
    
    console.log("Auth Token definido:", authToken ? "‚úÖ Sim" : "‚ùå N√£o");
    console.log("Auth Token valor:", authToken ? authToken.substring(0, 20) + "..." : "N√£o definido");
    console.log("User ID definido:", userId ? "‚úÖ Sim" : "‚ùå N√£o");
    console.log("User ID valor:", userId);
    console.log("Request Status:", response.status);
    console.log("Response Body:", response.body);
    
    if (!authToken) {
        console.log("‚ö†Ô∏è ATEN√á√ÉO: Token n√£o est√° definido! Execute o login primeiro.");
    }
    
    // Capturar subscription ID se a requisi√ß√£o foi bem-sucedida
    if (response.status === 200 || response.status === 201) {
        const body = response.body;
        if (body.id) {
            client.global.set("subscriptionId", body.id);
            console.log("‚úÖ Subscription ID capturado:", body.id);
            console.log("‚úÖ Stripe Subscription ID:", body.stripeSubscriptionId);
            console.log("‚úÖ Status:", body.status);
            
            if (body.stripeSubscriptionId) {
                console.log("üîó Link para Stripe Dashboard:");
                console.log(`   https://dashboard.stripe.com/test/subscriptions/${body.stripeSubscriptionId}`);
            }
        }
    }
%}

###



###

# GET - Verificar assinatura
GET {{baseUrl}}/payment/subscription
Authorization: Bearer {{authToken}}

> {%
    console.log("=== VERIFICA√á√ÉO DE ASSINATURA ===");
    if (response.status === 200) {
        const body = response.body;
        console.log("‚úÖ Assinatura encontrada:");
        console.log("   - ID:", body.id);
        console.log("   - Status:", body.status);
        console.log("   - Stripe Subscription ID:", body.stripeSubscriptionId);
        console.log("   - Customer ID:", body.stripeCustomerId);
        console.log("   - Expira em:", body.currentPeriodEnd);
        
        if (body.stripeSubscriptionId) {
            console.log("üîó Link para Stripe Dashboard:");
            console.log(`   https://dashboard.stripe.com/test/subscriptions/${body.stripeSubscriptionId}`);
        }
        
        if (body.status === 'incomplete') {
            console.log("‚ö†Ô∏è Status 'incomplete' - Pagamento pendente");
            console.log("   Para ativar, configure webhooks ou processe o pagamento");
        } else if (body.status === 'active') {
            console.log("‚úÖ Status 'active' - Assinatura ativa!");
        }
    } else if (response.status === 404) {
        console.log("‚ùå Nenhuma assinatura encontrada");
    } else {
        console.log("‚ùå Erro ao verificar assinatura:", response.status);
    }
%}

###

# GET - Verificar status da assinatura
GET {{baseUrl}}/payment/subscription/status
Authorization: Bearer {{authToken}}

> {%
    console.log("=== STATUS DA ASSINATURA ===");
    if (response.status === 200) {
        const body = response.body;
        console.log("Tem assinatura ativa:", body.hasActiveSubscription);
        
        if (body.hasActiveSubscription && body.subscription) {
            console.log("üìä Detalhes da assinatura ativa:");
            console.log("   - ID:", body.subscription.id);
            console.log("   - Status:", body.subscription.status);
            console.log("   - Expira em:", body.subscription.currentPeriodEnd);
            console.log("   - Cancelar no fim do per√≠odo:", body.subscription.cancelAtPeriodEnd);
        }
    }
%}

###

# DELETE - Cancelar assinatura
DELETE {{baseUrl}}/payment/subscription
Authorization: Bearer {{authToken}}

###

# POST - Webhook do Stripe (para testes locais)
POST {{baseUrl}}/payment/webhook
Content-Type: {{contentType}}
stripe-signature: YOUR_WEBHOOK_SIGNATURE

{
  "id": "evt_test_webhook",
  "object": "event",
  "type": "customer.subscription.created",
  "data": {
    "object": {
      "id": "sub_test_123",
      "object": "subscription",
      "status": "active",
      "current_period_end": 1640995200,
      "metadata": {
        "userId": "{{userId}}"
      }
    }
  }
}

###

# ===== UTILIT√ÅRIOS =====

# GET - Verificar status da API
GET {{baseUrl}}/health

###

# GET - Testar recurso premium (requer assinatura ativa)
GET {{baseUrl}}/premium-feature
Authorization: Bearer {{authToken}}

> {%
    console.log("=== TESTE RECURSO PREMIUM ===");
    console.log("Status:", response.status);
    console.log("Response:", response.body);
    
    if (response.status === 200) {
        console.log("‚úÖ Acesso autorizado ao recurso premium!");
    } else if (response.status === 403) {
        console.log("‚ùå Acesso negado - verifique se voc√™ tem uma assinatura ativa");
    }
%}

###

# GET - Verificar vari√°veis atuais
# @name checkVars
GET {{baseUrl}}/user/{{userId}}
Authorization: Bearer {{authToken}}

> {%
    console.log("=== VARI√ÅVEIS ATUAIS ===");
    console.log("Base URL:", client.global.get("baseUrl"));
    console.log("Auth Token:", client.global.get("authToken") ? "Definido" : "N√£o definido");
    console.log("User ID:", client.global.get("userId") ? client.global.get("userId") : "N√£o definido");
    console.log("Subscription ID:", client.global.get("subscriptionId") ? client.global.get("subscriptionId") : "N√£o definido");
%}

###

# ===== INSTRU√á√ïES DE USO =====
# 
# 1. Execute primeiro o endpoint "POST - Login" para capturar o token
# 2. Execute "POST - Criar assinatura com m√©todo de pagamento de teste" para criar uma assinatura
# 3. Use "GET - Verificar assinatura" para ver os detalhes
# 4. Use "GET - Verificar status da assinatura" para verificar se est√° ativa
# 
# ‚ö†Ô∏è IMPORTANTE:
# - O status "incomplete" √© normal quando a assinatura √© criada
# - Para ativar, configure webhooks no Stripe ou processe o pagamento
# - Em produ√ß√£o, use o endpoint normal sem "/test"
# - O endpoint "/test" usa um cart√£o de teste do Stripe automaticamente
